/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2024-02-03 13:18:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.users;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1697899262957L));
    _jspx_dependants.put("jar:file:/C:/PersonalProject_eGov3.10/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/myBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write(".subject {\r\n");
      out.write("\tfont-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<title>회원가입 폼</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<h2>회원가입 폼</h2>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<form action=\"/users/join\" method=\"post\" id=\"join-frm\">\r\n");
      out.write("\t\t\t<!-- 아이디 입력 -->\r\n");
      out.write("\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t<label for=\"usersId\" class=\"subject\">아이디</label>\r\n");
      out.write("\t\t\t\t<!-- input-group덕에 버튼이 옆에 붙는듯 -->\r\n");
      out.write("\t\t\t\t<div class=\"input-group\">\r\n");
      out.write("\t\t\t\t\t<input name=\"usersId\" id=\"usersId\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\trequired=\"required\" placeholder=\"아이디 입력\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" id=\"checkMemId\">중복확인</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div id=\"checkId-result\">알파벳과 숫자를 포함하여 4~20글자를 입력해주세요</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- 비밀번호 / 비밀번호 확인(얘네는 autocomplete=\"off\" 꼭해야함 비밀번호라 보안상 필요함(콘솔에 떴음)-->\r\n");
      out.write("\t\t\t<!-- col 먹이려면 row로 먼저 감싸야하는듯 -->\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"usersPw\" class=\"subject\">비밀번호</label> <input\r\n");
      out.write("\t\t\t\t\t\ttype=\"password\" name=\"usersPw\" id=\"usersPw\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\trequired=\"required\" placeholder=\"비밀번호 입력\" autocomplete=\"off\">\r\n");
      out.write("\t\t\t\t\t<div id=\"password-result\">영문, 숫자, 특수문자 중 2가지 이상을 조합하고, 8자리 이상을 입력해주세요</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"usersPw2\" class=\"subject\">비밀번호 확인</label> <input\r\n");
      out.write("\t\t\t\t\t\ttype=\"password\" name=\"usersPw2\" id=\"usersPw2\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\trequired=\"required\" placeholder=\"비밀번호 확인\" autocomplete=\"off\">\r\n");
      out.write("\t\t\t\t\t<div id=\"password-result2\"></div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- 이름/성별 -->\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"usersName\" class=\"subject\">이름</label> <input\r\n");
      out.write("\t\t\t\t\t\tname=\"usersName\" id=\"usersName\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\trequired=\"required\" placeholder=\"이름 입력\">\r\n");
      out.write("\t\t\t\t\t<div id=\"name-result\">이름은 한글 2~6글자로 입력해주세요.</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label class=\"subject\">성별</label>\r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t<label for=\"male\" class=\"radio-inline\"> <input type=\"radio\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"usersGender\" id=\"male\" checked value=\"남자\">남자\r\n");
      out.write("\t\t\t\t\t\t</label> \r\n");
      out.write("\t\t\t\t\t\t<label for=\"female\"class=\"radio-inline\"> <input type=\"radio\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"usersGender\" id=\"female\" value=\"여자\">여자\r\n");
      out.write("\t\t\t\t\t\t</label>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- 이메일/연락처 -->\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"usersEmail\" class=\"subject\">이메일</label> <input\r\n");
      out.write("\t\t\t\t\t\tname=\"usersEmail\" id=\"usersEmail\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"이메일 입력\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"usersTel\" class=\"subject\">연락처</label> <input type=\"tel\"\r\n");
      out.write("\t\t\t\t\t\tname=\"usersTel\" id=\"usersTel\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"연락처 입력(- 제외)\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- 우편번호 -->\r\n");
      out.write("\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t<label for=\"usersZip\" class=\"subject\">우편번호</label>\r\n");
      out.write("\t\t\t\t<div class=\"input-group\">\r\n");
      out.write("\t\t\t\t\t<input name=\"usersZip\" id=\"usersZip\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"우편번호 입력\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" id=\"findZipCodeBtn\"\r\n");
      out.write("\t\t\t\t\t\tonclick=\"openDaumPostcode()\">우편번호찾기</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- 기본주소 / 상세주소 -->\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"usersAddress\" class=\"subject\">기본주소</label> <input\r\n");
      out.write("\t\t\t\t\t\tname=\"usersAddress\" id=\"usersAddress\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"기본주소 입력\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"form-group col-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"usersAddress2\" class=\"subject\">상세주소</label> <input\r\n");
      out.write("\t\t\t\t\t\tname=\"usersAddress2\" id=\"usersAddress2\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"상세주소 입력\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- 파일 업로드 -->\r\n");
      out.write("\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t<label for=\"filesSeq \" class=\"subject\">프로필 사진</label> <input\r\n");
      out.write("\t\t\t\t\tname=\"filesSeq \" id=\"filesSeq \" class=\"form-control\" type=\"file\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<hr>\r\n");
      out.write("\t\t\t<!-- 가입하기 버튼 생성 -->\r\n");
      out.write("\t\t\t<div class=\"text-end\">\r\n");
      out.write("\t\t\t\t<button type=\"submit\" class=\"btn btn-outline-primary\" id=\"join-btn\">가입하기</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-outline-danger\" id=\"joinCancle\"\r\n");
      out.write("\t\t\t\t\tonclick=\"history.back()\">취소</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<!-- ============================================================== 구분선 ============================================================== -->\r\n");
      out.write("\t<!-- ============================================================== 구분선 ============================================================== -->\r\n");
      out.write("\t<!-- ============================================================== 구분선 ============================================================== -->\r\n");
      out.write("\t<!-- ============================================================== 구분선 ============================================================== -->\r\n");
      out.write("\t<!-- ============================================================== 구분선 ============================================================== -->\r\n");
      out.write("\t<!-- ============================================================== 구분선 ============================================================== -->\r\n");
      out.write("\t<!-- ============================================================== 구분선 ============================================================== -->\r\n");
      out.write("\r\n");
      out.write("\t<!-- Daum 우편번호 서비스 스크립트 추가 -->\r\n");
      out.write("\t<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// 우편번호 찾기 팝업 호출 함수\r\n");
      out.write("\t\tfunction openDaumPostcode() {\r\n");
      out.write("\t\t\tnew daum.Postcode(\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\toncomplete : function(data) {\r\n");
      out.write("\t\t\t\t\t\t\t// 선택한 주소를 폼에 반영\r\n");
      out.write("\t\t\t\t\t\t\tdocument.getElementById('usersZip').value = data.zonecode;\r\n");
      out.write("\t\t\t\t\t\t\tdocument.getElementById('usersAddress').value = data.address;\r\n");
      out.write("\t\t\t\t\t\t\tdocument.getElementById('usersAddress2').focus(); // 상세주소로 포커스 이동\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}).open();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- 유효성 처리 -->\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// 아이디 유효성 + 중복체크\r\n");
      out.write("\t\t$(function() {\r\n");
      out.write("\t\t\t// 사용자가 화면에서 인풋값에 입력하는 아이디가 usersIdValue에 담김\r\n");
      out.write("\t\t\tlet usersIdValue = $(\"#usersId\");\r\n");
      out.write("\t\t\tconsole.log(usersIdValue.val());\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 중복확인을 누르면 담긴 아이디의 값이 usersId 키 값에 들어감\r\n");
      out.write("\t\t\t$(\"#checkMemId\").on(\"click\", function() {\r\n");
      out.write("\t\t\t\tlet usersId = {\r\n");
      out.write("\t\t\t\t\t\"usersId\" : usersIdValue.val()\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tlet checkId_result = $(\"#checkId-result\");\r\n");
      out.write("\t\t\t\tconsole.log(usersId);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl : \"/users/idCheck\",\r\n");
      out.write("\t\t\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\t\t\tdata : JSON.stringify(usersId),\r\n");
      out.write("\t\t\t\t\tdataType : \"json\",\r\n");
      out.write("\t\t\t\t\tcontentType : \"application/json;charset=UTF-8\",\r\n");
      out.write("\t\t\t\t\txhrFields : { //서버간 인증 쿠키를 주고 받으려면 true로 써야한다고함\r\n");
      out.write("\t\t\t\t\t\twithCredentials : true\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t}).done(function(rst) {\r\n");
      out.write("\t\t\t\t\tconsole.log(rst);\r\n");
      out.write("\t\t\t\t\tif (rst.rst === \"ok\") {\r\n");
      out.write("\t\t\t\t\t\tcheckId_result.css(\"color\", \"green\").html(rst.msg);\r\n");
      out.write("\t\t\t\t\t\tsubmitFlag = true;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcheckId_result.css(\"color\", \"red\").html(rst.msg);\r\n");
      out.write("\t\t\t\t\t\tsubmitFlag = false; // 서브밋플래그 false로 하면 폼 제출을 거부하는거임.\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}).fail(function(xhr) {\r\n");
      out.write("\t\t\t\t\tconsole.log(xhr);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 이름 유효성 검증 (DB에서 값 가져오는건 아님)\r\n");
      out.write("\t\t$(\"#usersName\").on(\"change\", function(){\r\n");
      out.write("\t\t\tconst regExp = /^[가-힣]{2,6}$/;\r\n");
      out.write("\t\t\tlet usersNameValue = $(this).val();\r\n");
      out.write("\t\t\tlet usersNameResult = $(\"#name-result\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(usersNameValue.match(regExp) === null){ // match() 메서드는 문자열이 정규식과 매치되는 부분을 검색함\r\n");
      out.write("\t\t\t\tusersNameResult.css(\"color\", \"red\").html(\"자음/모음이 아닌 한글로 이루어진 2~6글자의 이름만 가능합니다.\");\r\n");
      out.write("\t\t\t\tsubmitFlag = false;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t        usersNameResult.css(\"color\", \"green\").html(\"올바른 이름 형식입니다.\");\r\n");
      out.write("\t\t\t\tsubmitFlag = true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 비밀번호 유효성 검증(역시 DB에서 값 가져올건 아님)\r\n");
      out.write("\t\t$(\"#usersPw\").on(\"input\", function(){ // 사용자가 패스워드 인풋에 값을 입력하면\r\n");
      out.write("\t\t\tconst regExp = /^(?!((?:[A-Za-z]+)|(?:[~!@#$%^&*()_+=]+)|(?:[0-9]+))$)[A-Za-z\\d~!@#$%^&*()_+=]{8,20}$/;\r\n");
      out.write("\t\t\tif ($(\"#usersPw\").val().match(regExp) === null){\r\n");
      out.write("\t\t\t\t$(\"#password-result\").css(\"color\", \"red\").html(\"영문, 숫자, 특수문자 중 2가지 이상 조합하여 8자리 이상\");\r\n");
      out.write("\t\t\t\tsubmitFlag = false;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\t$(\"#password-result\").css(\"color\", \"green\").html(\"사용 가능한 비밀번호입니다.\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$(\"#usersPw2\").on(\"input\", function(){\r\n");
      out.write("\t\t\tif($(this).val() !== $(\"#usersPw\").val()){\r\n");
      out.write("\t\t\t\t$(\"#password-result2\").css(\"color\", \"red\").html(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("\t\t\t\tsubmitFlag = false;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\t$(\"#password-result2\").css(\"color\", \"green\").html(\"비밀번호가 일치합니다.\");\r\n");
      out.write("\t\t\t\tsubmitFlag = true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
